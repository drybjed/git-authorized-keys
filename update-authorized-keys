#!/bin/bash

# update-authorized-keys: generate ~/.ssh/authorized_keys from list of git repositories
# Copyright (C) 2013 Maciej Delmanowski <drybjed@gmail.com>
# Homepage: https://github.com/drybjed/git-authorized-keys

# This program is free software; you can redistribute
# it and/or modify it under the terms of the
# GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License,
# or (at your option) any later version.
#
# This program is distributed in the hope that it will
# be useful, but WITHOUT ANY WARRANTY; without even the
# implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE. See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General
# Public License along with this program; if not,
# write to the Free Software Foundation, Inc., 59
# Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
# An on-line copy of the GNU General Public License can
# be downloaded from the FSF web page at:
# http://www.gnu.org/copyleft/gpl.html


set -e

# Defaults
key_list="${HOME}/.ssh/git_authorized_keys"
authorized_keys="${HOME}/.ssh/authorized_keys"
authorized_keys_checksum="${key_list}.checksum"

scriptname="`basename ${0}`"

options=`getopt -n ${0} -o "-cefghlqtv" -l "checksum,edit,force,list-git,help,usage,list,quiet,test,version" -- "$@"`

eval set -- "$options"

declare c e f g h l q t v git_quiet error_warning

while [ $# -gt 0 ] ; do
	case "$1" in
		-c|--checksum)		c=1 ; shift ;;
		-e|--edit)		e=1 ; shift ;;
		-f|--force)		f=1 ; shift ;;
		-g|--list-git)		g=1 ; shift ;;
		-h|--help|--usage)	h=1 ; shift ;;
		-l|--list)		l=1 ; shift ;;
		-q|--quiet)		q=1 ; shift ;;
		-t|--test)		t=1 ; shift ;;
		-v|--version)		v=1 ; shift ;;
		--) shift ;;
	esac
done

# -- Version
[ ! -z "$v" ] && echo "${scriptname} v0.2" && exit 0

# -- Help/Usage
[ ! -z "$h" ] && echo "${scriptname}: generate ~/.ssh/authorized_keys using git

This Script reads a formatted list of git repositories from
~/.ssh/git_authorized_keys, clones them to a temporary directory
and copies contents of the specified file into ~/.ssh/authorized_keys (with backup
copy of previous version).

Options:
  -c, --checksum        check file checksums, return the result, exit
  -e, --edit		open text editor with list of repositories
  -f, --force		force regeneration of ~/.ssh/authorized_keys
  -g, --list-git	print list of git clone commands and exit
  -h, --help, --usage	display this help message and exit
  -l, --list		print list of git repositories and exit
  -q, --quiet		be quiet, ignore errors
  -t, --test		check if list of repositories exists, if not then
			exit without raising error
  --version		display version and exit

When run without options, ${scriptname} looks for changes in
~/.ssh/authorized_keys or ~/.ssh/git_authorized_keys and recreates the former
if necessary.

Key list is read from: ${key_list}
Key list format:

  <git repository> <dir/filename> [branch]

- git repository: any URI accepted by \`git clone\`
- dir/filename: path to file with ssh public keys relative to repository
- branch: optional branch/tag to checkout, default: master
Empty lines and lines beginning with '#' are ignored.

To use as different user: sudo -H -u <username> ${scriptname}" && exit 0

# -- Check if key list exists, exit quietly if it doesn't
[ ! -z "$t" ] && [ ! -f "${key_list}" ] && exit 0

# -- Make git behave quietly
[ ! -z "$q" ] && git_quiet="--quiet"

# Make error messages just a warning if we use the Force
[ ! -z "$f" ] && error_warning="warning" || error_warning="error"

# -- Check the checksum, return the result and exit
if [ ! -z "$c" ] ; then

	set +e
	sha1sum --strict --quiet --status --check ${authorized_keys_checksum} &> /dev/null
	sha1sum_rc=$?
	set -e

	if [ ! -z "$q" ] ; then
		exit ${sha1sum_rc}
	else
		if [ ${sha1sum_rc} -eq 0 ] ; then
			echo "Checksum OK" ; exit 0
		else
			echo "Checksum changed" ; exit 0
		fi
	fi
fi

# -- Open editor with key list before doing anything
if [ ! -z "$e" ] ; then
	editor ${key_list}
	# Exit if we don't have any changes in $key_list or $authorized_keys
	[ -f "${authorized_keys_checksum}" ] && sha1sum --strict --quiet --status --check ${authorized_keys_checksum} && exit 0
fi

# Exit if there is no key list
[ ! -f "${key_list}" ] && echo "${scriptname}: error: no key list '${key_list}'" && exit 1

# -- Display key list and exit
if [ ! -z "$l" ] ; then
	while read repository file branch; do
		[[ "$repository" =~ (^\s*#|^\s*$) ]] && continue
		local_branch="${branch:-master}"
		echo "${repository} ${file} (${local_branch})"
	done < ${key_list}
	exit 0
fi

# Print list of git commands and exit
if [ ! -z "$g" ] ; then
	while read repository file branch; do
		[[ "$repository" =~ (^\s*#|^\s*$) ]] && continue
		local_repository="`basename ${repository}`-`date +%s.%N`"
		local_branch="${branch:-master}"
		echo "git clone ${git_quiet} --branch ${local_branch} ${repository} ${local_repository}"
	done < ${key_list}
	exit 0
fi

# Exit if we don't have any changes in $key_list or $authorized_keys and we don't use the Force
[ -z "$f" ] && [ -f "${authorized_keys_checksum}" ] && sha1sum --strict --quiet --status --check ${authorized_keys_checksum} && exit 0

# Remove old checksum file, we are recreating ~/.ssh/authorized_keys
rm -rf ${authorized_keys_checksum}

# Setup temporary environment
TEMPDIR=`mktemp -d`
trap "rm -rf ${TEMPDIR}" EXIT

temp_authorized_keys="${TEMPDIR}/authorized_keys"

cd ${TEMPDIR}

touch ${temp_authorized_keys}

# Add header in $authorized_keys
cat <<EOF >> ${temp_authorized_keys}
# ${authorized_keys} file generated by `basename $0` on `date`
# Key list: ${key_list}
# sha1sum: `sha1sum ${key_list}`

EOF

# Generate $authorized_keys from list of repositories in $key_list
while read repository file branch; do

	# Ignore comments and empty lines
	[[ "$repository" =~ (^\s*#|^\s*$) ]] && continue

	# Ignore non-existent repositories with --quiet option
	if [ ! -z "$q" -o ! -z "$f" ] ; then

		set +e
		git ls-remote --exit-code ${repository} &> /dev/null
		git_rc=$?
		set -e

		if [ ${git_rc} -ne 0 ] ; then
			if [ ! -z "$q" ] ; then
				continue
			else
				echo "${scriptname}: ${error_warning}: repository ${repository} does not exist"
				continue
			fi
		fi
	fi

	# Check if file to include was specified
	if [ -z "${file}" ] ; then

		# and ignore if it wasn't
		[ ! -z "$q" ] && continue

		echo "${scriptname}: ${error_warning}: no file specified for ${repository} repository"
		if [ ! -z "$f" ] ; then
			continue
		fi
		exit 1
	fi

	# Script works so fast we need nanosecond accuracy
	local_repository="`basename ${repository}`-`date +%s.%N`"
	local_file="${local_repository}/${file}"
	local_branch="${branch:-master}"

	git clone ${git_quiet} --branch ${local_branch} ${repository} ${local_repository}

	if [ ! -e ${local_file} ] ; then
		[ ! -z "$q" ] && continue

		echo "${scriptname}: ${error_warning}: file ${file} in repository ${repository} not found"
		if [ ! -z "$f" ] ; then
			continue
		fi
		exit 1
	fi

	cat <<EOF >> ${temp_authorized_keys}
# Source: ${repository} ${file} (${local_branch})
# sha1sum: `sha1sum ${local_file} | awk '{print $1}'` ${file}
EOF
	cat ${local_file} >> ${temp_authorized_keys}
	echo "" >> ${temp_authorized_keys}

done < ${key_list}

# Install generated $authorized_keys
if [ -f "${authorized_keys}" ]; then
	mv ${authorized_keys} ${authorized_keys}.`date +%Y-%m-%d_%H-%M-%S`
fi

mv ${temp_authorized_keys} ${authorized_keys}

# Make a checksum of $key_list and $authorized_keys
sha1sum ${key_list} ${authorized_keys} > ${authorized_keys_checksum}

